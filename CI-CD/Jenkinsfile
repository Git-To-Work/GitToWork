pipeline {
    agent any

    environment {
        COMPOSE_FILE = 'CI-CD/docker-compose.yml'
        GIT_CREDENTIAL = 'c103'
        BACKEND_CRED  = 'backend-properties'
        FASTAPI_CRED  = 'fastapi-env'
        FRONTEND_CRED = 'frontend-env'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'develop', credentialsId: "${GIT_CREDENTIAL}", url: 'https://lab.ssafy.com/s12-bigdata-recom-sub1/S12P21C103.git'
            }
        }
        
        stage('Build Custom Flutter Image') {
            steps {
                dir('CI-CD') {
                    echo 'Building custom Flutter image'
                    sh 'docker build -t my-flutter:custom .'
                }
            }
        }
        
        stage('Inject Credentials') {
            steps {
                script {
                    withCredentials([file(credentialsId: "${BACKEND_CRED}", variable: 'BACKEND_PROP_FILE')]) {
                        echo "Injecting backend credentials..."
                        sh '''
                            mkdir -p backend/src/main/resources
                            cp "$BACKEND_PROP_FILE" backend/src/main/resources/application.properties
                        '''
                    }
                    
                    withCredentials([file(credentialsId: "${FASTAPI_CRED}", variable: 'FASTAPI_PROP_FILE')]) {
                        echo "Injecting fastapi credentials..."
                        sh '''
                            mkdir -p bigdata
                            cp "$FASTAPI_PROP_FILE" bigdata/.env
                        '''
                    }
                    
                    withCredentials([file(credentialsId: "${FRONTEND_CRED}", variable: 'FRONTEND_PROP_FILE')]) {
                        echo "Injecting frontend credentials..."
                        sh '''
                            mkdir -p frontend/gittowork
                            cp "$FRONTEND_PROP_FILE" frontend/gittowork/.env
                        '''
                    }
                }
            }
        }
        
        stage('Build Flutter Web') {
            agent {
                docker {
                    image 'my-flutter:custom'
                }
            }
            steps {
                // Jenkinsfile이 CI-CD 폴더 내에 있으므로, Flutter 프로젝트 폴더는 상위 디렉토리로 이동
                dir('../frontend/gittowork') {
                    echo 'Flutter 웹 애플리케이션 빌드 시작'
                    sh '''
                        export HOME=/var/jenkins_home
                        git config --global --add safe.directory /sdks/flutter
                        flutter pub get
                        flutter build web
                    '''
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                echo 'Docker 이미지 빌드 시작'
                sh "docker-compose -f ${COMPOSE_FILE} build"
            }
        }
        
        stage('Deploy Services') {
            steps {
                echo '서비스 배포: docker-compose up -d'
                sh "docker-compose -f ${COMPOSE_FILE} up -d"
                sh "sleep 10"
            }
        }
        
        stage('Test Deployment') {
            steps {
                echo '배포 상태 확인: docker-compose ps'
                sh "docker-compose -f ${COMPOSE_FILE} ps"
            }
        }
        
        stage('Cleanup Unused Docker Resources') {
            steps {
                echo '사용하지 않는 Docker 이미지 및 캐시 정리'
                sh "docker image prune -a -f"
                sh "docker container prune -f"
                sh "docker network prune -f"
                sh "docker builder prune -f"
            }
        }
    }
    
    post {
        always {
            echo '파이프라인 종료: 사용하지 않는 Docker 자원 정리 완료'
        }
    }
}
