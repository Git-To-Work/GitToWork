pipeline {
    agent any

    environment {
        COMPOSE_FILE = 'CI-CD/docker-compose.yml'
        GIT_CREDENTIAL = 'c103'
        BACKEND_CRED  = 'backend-properties'
        FIREBASE_CRED = 'firebase-key'
        FASTAPI_CRED  = 'fastapi-env'
        MATTERMOST_ENDPOINT = 'https://meeting.ssafy.com/hooks/kw1jqcjjejgeiqq3mbwzuixzkh'
        MATTERMOST_CHANNEL = 'jenkins-build-c103'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'develop', credentialsId: "${GIT_CREDENTIAL}", url: 'https://lab.ssafy.com/s12-bigdata-recom-sub1/S12P21C103.git'
            }
        }

        stage('Inject Credentials') {
            steps {
                script {
                    withCredentials([file(credentialsId: "${BACKEND_CRED}", variable: 'BACKEND_PROP_FILE')]) {
                        echo "Injecting backend credentials..."
                        sh '''
                            mkdir -p backend/src/main/resources
                            cp "$BACKEND_PROP_FILE" backend/src/main/resources/application.properties
                        '''
                    }

                    withCredentials([file(credentialsId: "${FIREBASE_CRED}", variable: 'FIREBASE_SECRET_KEY_FILE')]) {
                        echo "Injecting backend credentials..."
                        sh '''
                            mkdir -p backend/src/main/resources
                            chmod u+w backend/src/main/resources/gittowork-firebase-key.json
                            cp "$FIREBASE_SECRET_KEY_FILE" backend/src/main/resources/gittowork-firebase-key.json
                        '''
                    }
                    
                    withCredentials([file(credentialsId: "${FASTAPI_CRED}", variable: 'FASTAPI_PROP_FILE')]) {
                        echo "Injecting fastapi credentials..."
                        sh '''
                            mkdir -p bigdata
                            cp "$FASTAPI_PROP_FILE" bigdata/.env
                        '''
                    }
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                echo 'Docker 이미지 빌드 시작'
                sh "docker-compose -f ${COMPOSE_FILE} build"
            }
        }
        
        stage('Deploy Services') {
            steps {
                echo '서비스 배포: docker-compose up -d'
                sh '''
                    docker stop nginx
                    docker rm -f fastapi
                    docker rm -f backend
                    docker-compose -f CI-CD/docker-compose.yml up -d
                    sleep 10
                    docker start nginx
                '''
            }
        }
        
        stage('Test Deployment') {
            steps {
                echo '배포 상태 확인: docker-compose ps'
                sh "docker-compose -f ${COMPOSE_FILE} ps"
            }
        }
        
        stage('Cleanup Unused Docker Resources') {
            steps {
                echo '사용하지 않는 Docker 이미지 및 캐시 정리'
                sh "docker image prune -a -f"
                sh "docker container prune -f"
                sh "docker network prune -f"
                sh "docker builder prune -f"
            }
        }
    }
    
    post {
        always {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                if (currentBuild.currentResult == 'SUCCESS') {
                    mattermostSend(
                        color: 'good',
                        message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                        endpoint: "${env.MATTERMOST_ENDPOINT}",
                        channel: "${env.MATTERMOST_CHANNEL}"
                    )
                } else {
                    mattermostSend(
                        color: 'danger',
                        message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                        endpoint: "${env.MATTERMOST_ENDPOINT}",
                        channel: "${env.MATTERMOST_CHANNEL}"
                    )
                }
            }
            echo '파이프라인 종료: 사용하지 않는 Docker 자원 정리 완료'
        }
    }
}
