version: '3.8'

services:
  mysql:
    image: mysql:8
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: Il9vzD1KZYfSP2qO5NLU
      MYSQL_DATABASE: gittowork
      MYSQL_USER: c103
      MYSQL_PASSWORD: kOZmrcUmgnKl5FKBdBuj
    ports:
      - "3306:3306"
    command: >
      --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci
    volumes:
      - db_data:/var/lib/mysql
      - ./backend/src/main/resources/db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  mongodb:
    image: mongo:5
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app-network

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      # Spring Application 및 JPA 설정
      SPRING_APPLICATION_NAME: gittowork
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQLDialect
      SPRING_JPA_OPEN_IN_VIEW: "false"
      # MySQL 접속 정보 (Docker 네트워크 내에서는 mysql 컨테이너 이름 사용)
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/gittowork
      SPRING_DATASOURCE_USERNAME: c103
      SPRING_DATASOURCE_PASSWORD: kOZmrcUmgnKl5FKBdBuj
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      # MongoDB 접속 정보 (컨테이너 이름 mongodb 사용)
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/gittowork
      SPRING_DATA_MONGODB_DATABASE: gittowork
      # Redis 접속 정보
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: "6379"
      SPRING_DATA_REDIS_TIMEOUT: "60000"
      # Spring AI (OpenAI) 설정
      SPRING_AI_OPENAI_API_KEY: your_openai_api_key
      SPRING_AI_OPENAI_ORGANIZATION_ID: your_openai_org_id
      # Github API 설정
      GITHUB_CLIENT_ID: Ov23liDOq2w9SK7sP0sj
      GITHUB_CLIENT_SECRET: b9385ce3c93339b14b0e947bac636d4ac698732f
      GITHUB_REDIRECT_URI: http://3.35.138.40/callback 
    depends_on:
      - mysql
      - mongodb
      - redis
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks:
      - app-network
  
  fastapi:
    container_name: fastapi
    build:
      context: ./bigdata
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      # FastAPI 기본 설정
      APP_NAME: "gittowork"
      DEBUG: "true"
      # MySQL 연결 정보
      MYSQL_URL: "mysql://c103:kOZmrcUmgnKl5FKBdBuj@mysql:3306/gittowork"
      # MongoDB 연결 정보
      MONGODB_URI: "mongodb://mongodb:27017/gittowork"
    depends_on:
      - mysql
      - mongodb
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - /etc/letsencrypt:/etc/nginx/ssl:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - backend
      - fastapi
      - mysql
      - redis
      - mongodb
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
  mongo_data:
